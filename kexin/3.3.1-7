3.3.1	限制信赖必要性（Limit the Need for Trust）
	描述
限制需要信任的系统元素的数量，或者限制系统元素被信任的时长，可以降低保障、持续保护和监视所需的工作量级别。

可信可以定义为一个实体的属性，可信属性可以为实体执行特定任务和履行其分配职责的资格、能力和可靠性提供受信证明。但是，如果缺少某种形式的验证、确认或论证（例如，设计分析、测试），则实体的受信证明将失去意义。
通过对“什么是可信的”、“什么是能被信任的”的最小化假设，来减少可信实体的数量，可减少攻击面，并降低保障成本。

在系统生命周期的早期阶段（概念）应用此设计原则最为有效：在该阶段，“预防/避免”目标最为清晰。当系统已经运行存在时，运行概念或系统架构的变更都将会增加成本。

继承限制是应用此设计原则的一种方法，此方法使用协同保护和特权限制技术。该方法要求：系统组件所属类型的相关联的特权或访问权限，不能自动传播/继承到从这些组件创建的子类或实例中去。虽然初始化继承限制可能会增加开发人员或管理员的负担，但可以降低多重继承相关的复杂性。

此原则可和其它韧性原则配合使用：
•	此结构设计原则支持减少攻击面及假设资源受损的战略设计原则。然而使用此原则也增加了支持敏捷性和适应性架构战略设计原则的难度。例如，使用特权访问工作站（PAW）可以为访问控制提供强有力的保护，但同时PAW只能用于这个单一目的。
•	该设计原则也可以与确定持续可信原则结合使用：如果一个系统元素假定或要求具有一个给定的可信级别，则需要某种证明机制来验证它具有并可继续保持该可信级别。最小化可信元素的数量，会减少确定持续可信所涉及的工作量。
该设计原则还可以与规划和管理多样性结合使用。对多种来源的系统元素、服务或信息的受控使用，可以让其行为或数据质量得到验证，这种验证可采用对比的方式进行。

	设计指导
1.	识别系统中支撑可信目标达成所必须的系统元素，并尽可能减小这些系统元素的规模。基于系统满足其业务目标和需求角度，确定系统需要保证的可信目标，并通过分析、建模或头脑风暴等方法确定每个系统元素的可信需求，并对系统元素设定一个最低的可信级别。统计有可信需求的系统元素的数量，并计算系统元素的比例是否达到设计要求。
2.	提供对系统元素的可信属性进行证明或保证的能力。确定给定系统元素的可信度之后，需要提供证明机制来验证其具有并可保持该可信度。比如：用形式化证明进行证明。

3.3.2	控制可见性和使用（Control Visibility and Use）
	描述
控制可被攻击者发现、观察和使用的内容，可增加攻击者在系统中扩大立足点或对系统施加更大影响的工作量。
不论是系统外部还是系统内部，控制可见性都可以对抗攻击者侦察嗅探的企图。无论是渗透、修改还是破坏，攻击者必须付出更多的代价来确定潜在的目标。
对访问和使用的限制可以基于信息敏感度，或者基于资产的Mission关键性来制定。在某些场景下，这些限制可能是动态变化的。比如某些资源在功能执行中是重要的，当功能执行结束后，其重要性就降低了。

	设计指导
1.	限制系统行为的外部可见性：即限制从系统外部交互实体或有利位置（即不经过防火墙、网络网关或代理服务器等干预组件）可以观察到的系统的行为。比如：对应用程序或网络层查询响应的延迟，使外部无法根据时延判断系统内部处理方式的差异；对失败登录尝试的响应不体现系统检查过程、规则相关的变化。
2.	限制系统资源和功能的可见性和使用。最常见的方式是使用访问控制列表机制或认证授权机制。这些方式不仅要在系统对外提供的访问入口上使用，对于系统内部组件间的访问也需要根据安全韧性要求来实施。从假设资源受损原则来考虑，椰子壳式的防御系统无法有效应对高级持续性威胁，从而无法提升系统的韧性水平。充分考虑系统内部恶意代码或组件的存在，并以此为前提进行系统架构设计，在内部组件之间或者不同可信等级的组件间设置可见性保护机制是必要的。这种设计可有效防止攻击者的横向移动，避免系统被进一步的入侵和破坏。比如：在系统组件间实施通讯双方的双向认证，使用接口访问白名单控制；对用户的数据对象标识属主属性，只有对数据享有所有权的用户可访问这些数据；对共操作系统部署运行的应用实例，分别使用不同的用户，部署到不同的文件夹中，并且设置彼此不能访问，同时限制应用不能调用能查询到其它应用运行数据的系统命令。
3.	减少系统信息的可见性。此类技术主要是各类数据加密、数据隐藏、混淆技术、网络流量加壳等。这类技术可有效防止系统信息被不期望的观察者获取。

包含和排除行为原则、最大化瞬态原则，也可以起到限制可见性和使用的效果，可以和该原则一起使用

3.3.3	包含和排除行为（Contain and Exclude Behaviors）
	描述
系统或系统元素的行为在不同的合法情景下存在不同，但对mission或者业务功能以及完成mission或业务功能的流程进行分析，能识别出一些总是不被接受的、或者只有在特定情况下才可接受的行为。排除行为就是针对此类行为进行排除，以防止其引发不良后果。
对行为的排除，可以按照不同保证程度进行事先排除，比如实施删除功能、限制功能、限制功能的使用等不同程度的措施。对行为进行排除时，通常需要就保证程度和灵活性进行权衡。

包含行为是指对给定系统元素的行为所影响的资源或系统元素集合进行限定。这种限定可以（但不是必须）包括时间方面的限定。例如，在特定时间窗口之内允许用户的活动。

包含和排除的限制措施可以通过预定义的权限和划分来事先实现。另一种可替代的方法，是应用适用性响应、动态隔离技术，在系统运行时执行排除和限制动作。比如：运行期监控到可疑行为后，动态创建沙箱或者欺骗环境，并将后续的动作转移到沙箱、欺骗环境中进行。

	设计指导
1.	定义系统中的行为：系统中的行为，包括用户行为和系统元素的行为。对这些行为进行清晰的定义，是系统实施行为排除和包含的前提。行为的定义通常包括两种方式：一种方式是定义异常行为，系统可针对可疑行为的定义，进行事先的或者运行时的防范；另一种方式是定义正常行为，系统可事先限定正常行为可执行或影响的范围，并在运行时监控系统中的行为是否偏离预定义的正常范围。后者在应对不断演进的网络安全事件时，相比前者更具有灵活性和敏捷性，但后者的技术措施也更复杂。
2.	设计静态包含/排除措施：针对已定义的系统行为，针对性的设计静态保护措施予以支持。比如：可通过配置限制某些系统功能的使用或者禁用某项功能；可通过权限设计、白名单机制等来排除不允许的操作，同时包含允许的操作；可通过子系统的隔离划分，来规范不同子系统之间的操作。
3.	动态包含/排除措施：系统在运行时，可以采集系统运行过程中的行为数据，并以预定义的行为作为基础进行数据分析，识别出可疑行为，并针对性的执行保护动作。为达成这一目的，需要在系统中运行如下的功能：行为数据采集、行为数据分析、异常行为处置。
•	行为数据采集：定期采集用户、系统元素的行为数据，作为行为数据分析的输入；
•	行为数据分析：依据预定义的异常行为对行为数据进行匹配，匹配到的异常行为被针对性的执行限制措施。如果预定义的是正常行为，则需要基于正常行为定义进行行为数据的分析，以便发现有别于正常行为的行为，这类行为不一定就是恶意行为，因此需要进一步的分析和判断后再进行决策。基于正常行为的行为分析技术，可参考使用用户实体行为分析（UEBA，User Entity Behavior Analysis）技术。
•	异常行为处置：对于明确的对系统可造成不利影响的恶意行为，可立即执行排除措施，包括阻止用户操作、禁用用户账户、隔离系统元素的通信、停止系统元素的运行等等；或者根据预定义的响应编排，对可疑行为主体进行限制、隔离，并恢复受影响的系统元素到预定义的安全状态。对于需进一步观察的可疑行为，则可动态创建沙箱环境或者蜜罐环境来接手后续的行为交互，通过观察可疑行为的表现，对其性质进行最终的判断。
3.3.4	层层防御和资源分隔（Layer Defenses and Partition Resources）
	描述
纵深防御和资源分隔的结合提升了系统的防御能力， 增加了攻击者突破系统的难度。
纵深防御是一种成熟的策略，它整合了系统各方面能力（包括人力的、技术的以及运营的），以便在多个系统层面和维度间建立可变的保护屏障。它“描述了通过应用多个机制构建的安全架构，以创建一系列屏障来防止、延迟或阻止攻击者的攻击。”，可将实现相同的目标或提供同等的功能的多个机制（例如：使用不同COTS的防火墙来分割DMZ中的不同区域）应用到单个层或不同的层（例如，在应用程序、操作系统和网络层检测可疑行为）。为避免可能导致错误或漏洞的不一致，应统一地管理此类（多个）机制。
防御的分层限制了攻击者在分层架构中的垂直移动；某一层的防御措施可阻止相邻层妥协的传播。
资源分区，并在不同分区的资源之间使用受控的接口，则可限制攻击者的横向移动。

	设计指导
1.	在不同的体系结构层提供多种机制来实现安全策略或网络韧性目标。确定对哪些安全策略目标（例如，保护、检测、响应；机密性、完整性、可用性、不可否认性）和网络韧性目标提供多种机制。在架构师对产品架构（逻辑的、物理的）已经进行分层设计的基础上，需要为每一层架构去设计一系列的安全防御机制，甚至要考虑重点增强设计某一层的安全机制，包括层与层之间的安全机制联动，从整体架构上来形成端到端的多点多重的纵深防御体系，而不是仅仅孤立的考虑在特定层的某个单一组件上来构建的安全方案。例如：对于单产品部件（如盒式设备产品），应注重针对产品软件逻辑分层架构，构筑每一层的安全体系，包括从硬件层、OS/逻辑中间层、业务层各层架构的安全防护机制。对于产品解决方案（ 如NFV、物联网、公有云等大型解决方案），除了要考虑基于软件逻辑分层架构设计安全架构外，还必须要在设计物理组网架构时，综合考虑构建从外部网络到隔离DMZ区、内部网络、主机、内部组件（APP ）、数据，各个物理组网层级的安全防护方案，保证关键资产、敏感数据的机密性、完整性、可用性安全目标。必须考虑基于默认安全、失效安全、纵深防御的韧性网络安全架构体系。
2.	为系统元素的静态和动态分区提供机制。定义资源分区，例如，根据要执行的安全策略、要支持的任务、控制中的组织元素等；实现资源分区，例如实现物理的或逻辑的分区，控制分区之间的接口，监控分区之间的交互等等；动态实例化资源分区，比如创建新分区，管理创建新分区的权限等等。
3.	限制共享资源：提供将资源专用于服务、应用程序或任务的不同实例的机制。确定资源共享的范围，比如跨多个服务、应用程序或任务共享资源范围等；确定每个关键任务系统元素，比如系统元素依赖哪些资源，哪些资源专用于IT，哪些是共享资源等
4.	在系统内部构建偏序的可信秩序，为关键资产构建相应可信度的组件。例如，可将最关键的资产置于最可信的组件内部。利用安全设计原则中偏序依赖、可信组件、分层信任、分层保护等原则，建立一个信任度由系统外部（处理用户数据部分）到内部（管理核心资产部分）逐渐提升的有序系统，使攻击者为获得每层的或每个组件的信任都需要付出额外的努力，提高攻击者的难度。

3.3.5	规划和管理多样性（Plan and Manage Diversity）
	描述
多样性是一种提升系统韧性的完善的技术。
多样性可以避免系统同质的风险。在同质系统中，一个组件因攻击而受到的损害会传播给所有其它类似的组件。而多样性要求为必须的功能提供替代方案，这样的好处是，一个组件因攻击受损后，可被一个或多个提供相同功能的组件所替代。
多样性存在很多实现方式：架构多样性、设计多样性（比如：模数混合设计）、合成多样性（比如：使用多种编译器）、信息多样性、命令/控制/通讯多样性（包括带外通信，一种在发射端与接收端之间传递的信息完全独立于无线电力传输过程的通信技术）、地理多样性，还有供应链多样性、运营流程多样性等。此外，架构多样性经常作为时间推移或不同用户偏好的附带产物出现，而且这种情况并不少见。
多样性原则与“关注关键资产”、“保持冗余”、“层层防御和资源分隔”原则一起使用会更有效率。

  	多样性可能在如下几个方面存在问题：
	可能增加攻击面：攻击者不是试图破坏单个组件并在所有这些组件之间传播，而是可以攻击备选方案集中的任何组件，寻找阻力最小的路径来建立立足点。
	导致生命周期成本的增加：强制开发人员、系统管理员、维护人员和用户处理多个到等效组件的接口，会对他们提出更高的要求。这增加了系统生命周期的成本，同时也增加了引入不一致的风险。
	多样性比实际情况更加表面化。例如，同一功能的多个不同实现都运行在同一个底层操作系统上；或者应用程序复用相同的软件组件。这些场景中，基础的系统架构并不具有多样性，而在应用层面呈现出多样性。因此，对利用多样性的架构方法的分析是至关重要的。对于嵌入式系统，一些多样性方法会带来各种研究挑战。
	多样性对攻击者的有效性不是绝对的：在攻击者TTP（Tactics, Techniques, Procedures，策略、技术、过程）背景下的确定最佳应对方案时，对多样性战略进行分析是必要的。

	设计指导
1.	在不同的物理位置点提供等效的功能，但功能的实现互不相同。
•	确定哪些功能需要以实现不同但功能等效的方式提供，比如使用Restful API，restconf等多种对外接口实现内部系统访问等。
•	确定实现功能的多样性的基础，比如易于实施、任务关键性、作为支持多个任务的功能的关键性等。
•	确定能力的等效性，以及相同但不相同的能力对于系统的影响。可通过分析、测试等方法来确定。
•	管理等效功能，比如访问或特权管理、资源分配、配置设置。
2.	为选定的任务提供纵深多样性。选定需要提供纵深多样性的任务，并在多个层次上提供多样性，比如技术实现、过程、配置等；
•	确定执行任务多样性的等效性。可通过分析、测试等方法来确定；
•	管理任务多样性的等效性。比如在任务的生命周期内，管理任务多样性的等效性，使其能长效保持。
3.	为关键系统元素提供多样性。确定哪些关键要素使用多样性，比如使用GPS或者1588提供系统时钟同步模块等


3.3.6	保持冗余（Maintain Redundancy）
	描述
   	冗余是韧性工程和可靠可用性保障工程中一个成熟的设计原则。冗余包括剩余容量（指富余的可用资源或备用组件）和备份（例如，冷备份、热备份或联机备份等）。

冗余可以与备份及故障转移过程一起实施；冗余是许多恢复策略的关键，冗余还可以增强关键功能的可用性。架构设计须分析系统的单一故障点和共享资源来建立和维护冗余度。
  	需要注意的是，随着配置的更新或连接性的变化，趋同的趋势会使冗余度随着时间的推移而降低，最终破坏冗余。

由于维持剩余容量或备用组件会增加系统生命周期成本，冗余原则结合“关注关键资产”原则一起使用会更加高效。考虑到恶意软件可以在同质的资源间传播，冗余作为韧性措施使用时，需结合“规划和管理多样性”原则，但多样性会增加复杂性和可扩展性方面的挑战。在应用“保持冗余”原则时，需要综合上述因素进行架构权衡。

	设计指导
1.	在多个位置保有副本资源，并保持资源同步。
	确定需要具备副本的资源。比如信息存储、服务、通信路径等。
	确定需要具备资源副本的依据。比如易于实施、任务关键性、作为支持多个任务的功能的关键性等。
	实现资源副本的同步机制，检测资源和资源副本之间的一致性，并进行资源同步。比如数据库更新、对服务的特权或配置设置的更改、软件更新在副本资源上也需要进行同步等。
2.	保持信息存储、处理和（或）通信的剩余容量。
	确定需要提供剩余容量的资源。比如信息存储、处理能力、通信带宽等。
	确定提供剩余容量的依据并由此判断需要多少剩余容量。比如需要这些资源来处理任务或突发事件等。
	提供机制实现剩余容量，并且保持剩余容量。比如提供证据或触发器来确定盈余容量已经被耗尽等。
3.3.7	使资源位置灵活（Make Resources Location-Versatile）
	描述
位置灵活的资源，是指那些不需要固定位置，可被重新定位或重组以最大化性能、避免中断并更好地避免成为攻击者高价值目标的资源。很多方式可实现资源位置灵活，这些方式包括虚拟化、复制（并行处理、数据分片等高可用技术）、分布式（功能分布式或数据存储分布式）、物理流动性、功能重定位等。例如： 
	复制和分布式，可跨地理位置、物理平台或虚拟机。复制可采用冗余的形式，也可通过重配置系统资源来提供等价功能的方式来实现。
	数据虚拟化，是指使用使用方读写数据时无需感知数据的存储位置和存储格式。
	可组合服务使任务或功能可以进行替代性重组，并且可以使用多种信息源对任务或业务数据进行替代性重组。

此原则通常与“保持冗余”、“规划和管理多样性”原则一起使用，并涉及动态定位技术的使用。此原则可对“支持敏捷性和适应性架构”、“最大化瞬态”、“改变或扰乱攻击面”等原则起到支持作用。但此原则可能会与“控制可见性和使用”原则发生冲突。

	设计指导
1.	以分布式的方式实现资源位置灵活：
	确定分布式的资源类型以及选择依据。比如基于资源的关键性进行选择等。
	确定资源分布式处理的方法。比如跨硬件平台、跨虚拟机等。
	提供机制能够访问分布式的资源。并保证可用，比如分布式资源的一部分已损坏或不可用，那么它所提供的功能可以重新构建等。
2.	以复制的方式实现资源位置灵活：
	确定目标对象的复制类型以及选择依据。
	确定复制实现的方法，比如并发处理、数据分片等。
	提供机制进行副本生成，并保证源和副本的一致性。比如数据库镜像处理等。
3.	以功能重新定位或替代重组的方式实现资源位置灵活：
	确定能够进行功能重新定位或替代重组的资源类型和选择依据。
	确定功能重新定位的方法。比如硬件平台、虚拟机之间的功能重部署等。
	提供机制来执行功能重定位或替代重组。比如VM管理中的VM实例化、VM状态跟踪、内部资源处理、VM的注销&重分配等机制等。
