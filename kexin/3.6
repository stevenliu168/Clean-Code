3.6.1	安全与非安全系统独立 （Separation of safety-related systems from non-safety-related systems）
	描述
为了防止系统的非安全部分以不期望的方式影响安全部分,安全相关系统与非安全相关系统独立设置。

	设计指导
定义非安全功能与安全功能的边界，在安全边界范围内识别安全功能并确定SIL以及总体安全要求，并将安全要求逐级分配给系统及组件。
3.6.2	多层深度防护 （Defense in depth）
	描述
通过设置多层的安全防护构成多道防线，即使某一防线失效也能被其他防线弥补或纠正。也可以理解为通过增加系统的防御屏障或将各层之间的漏洞错开的方式防范危险事件发生。

	设计指导
1.	系统具备多级降级工作能力，在故障出现时，尽可能完成隔离，使得系统剩余部分继续工作。当系统保持最小的端到端功能时，仍能够继续工作，直至系统达到完全不能工作范围。
2.	屏障的独立性非常重要，要避免共因导致的屏障同时失效以至于危险事件的发生。
3.6.3	紧急安全停机 （Emergency Safe Stop）
	描述
紧急状况下，采用停机以确保安全。

	设计指导
1.	系统要从架构上明确最小安全系统以保证在出现非常紧急状况时，能安全有效的实现停机（通常情况下停机被视为最安全状态）。
2.	紧急安全停机功能可以按照低要求模式进行设计。
说明：安全功能的运行模式分为连续模式、高要求模式、低要求模式。在相同的架构设计下，不同的运行模式，其安全功能可以达到的安全完整性水平（SIL）不同。
	连续模式：安全功能将EUC（Equipment Under Control）保持在安全状态是正常运行的一部分。
	高要求模式：仅当要求时才执行将EUC导入规定安全状态的安全功能，并且要求的频率大于每年一次。
	低要求模式： 意味着仅当要求时才执行将EUC导入规定安全状态的安全功能，并且要求的频率不大于每年一次。
3.	为保证其要求时能够正常发挥安全功能，要求在周期性的维护中进行全面的检测。
3.6.4	降低复杂性 （Reduce complexity）
	描述
安全功能要确保简单可靠，避免设计不足（如耦合性高）以及过度设计（如接口过多）。在架构设计中应该通过揭示意图（划分合理的层级及功能模块），最少元素（为满足安全需求所必需的最小元素集合），消除重复（提取公共的组件或者功能模块），通过设计验证（满足客户应用需求）达到简单设计的目的。

	设计指导
1.	合理定义安全功能边界及上下文，采用分层设计及模块化设计划分合理的安全功能层级及功能模块。
2.	只设计安全功能必须的内容，裁剪功能安全架构中与安全功能需求无关的组件或元素，简化系统架构中安全功能的组件。
3.	从架构设计中的重复组件或模块，提取公共的组件或者功能模块，减少功能安全架构设计中的高耦合，低内聚。
4.	满足客户应用需求，并通过设计验证。

备注：功能安全领域，要求架构设计后还需要进行设计验证，以保证设计的正确性,完整性和一致性，依据不同的SIL/ASIL水平选择设计验证方法。
3.6.5	行为可预见 （Predictability of behavior design）
	描述
要求在所有特定情况下正确和准确的预测系统的运行状态，尤其是在包含错误和失效的情况下。

	设计指导
设计过程中要采用逻辑程序流监视、失效断言编程、多样化监视、无状态设计、模块化、半形式化以及形式化设计方法等，设计中要尽可能避免如AI智能纠错等会引发不确定性行为的设计。
3.6.6	全面故障诊断 （Design for Diagnosis）
	描述
对影响安全功能的潜在危险失效增加诊断（功能安全中也称安全机制），使其转换为安全失效。故障诊断包含故障检测、定位以及处理一系列动作。

	设计指导
1.	功能安全中多采用基于冗余和多样性（软件故障）原理，利用表决来确定结果的正确性。适用的特殊方法有：
	对于软件：断言编程、NVP和多种监控技术；
	对于硬件：引入额外的传感器、控制回路、错误检查代码等故障检测可以通过在不同级别的（温度、电压等）、逻辑（错误检测代码）、功能（断言）或外部的检测来实现。
2.	为了能进行故障跟踪,可把这些检验的结果储存起来并把它们同数据联系起来。复杂系统是由子系统构成的,故障诊断的效率与各子系统中相互作用的复杂程度有关,这种相互作用的复杂性可影响故障的传播。应在最小的子系统级使用故障诊断,因为较小的子系统可以更详细地诊断故障（差错状态检测）。
3.6.7	防止共因失效 （Remove common cause failure）
	描述
共因失效是由一个或多个事件引起的故障，引发系统多个组件或者服务失效，最终导致系统失效。设计确保器件独立失效，不能因为器件失效引发共因或级联失效，导致整条链路功能失效。共因失效要从随机硬件失效（共用模块）、开发错误、生产错误、安装、维修等错误、环境因素、共同外部资源失效（供电、输入数据、系统间数据总线和通信）及特定工况下的压力（磨损及老化）综合考虑。

	设计指导
减少共因失效，可从如下三个方面考虑：
	冗余单元的物理隔离：如果将冗余设备物理隔离，那么控制系统就能较强地抵御环境造成的共因失效。在软件中，异步操作可以减少共因失效，应避免处理器间的同步机制。另外，在冗余处理器单元中使用不同的操作模式也可以减少共因失效的概率。
	多样化冗余：对冗余部件使用不同的设计，或者使用不同制造商的产品。
	增强组件可靠性：降低系统复杂性，减少设备的失效是有效降低共因失效的一个途径。复杂的操作尽可能自动完成，在操作和维护时用安全可靠性的技术。
3.6.8	人机界面直观且宽容 （Create an Intuitive and Forgiving Man-Machine Interface）
	描述
系统设计必须假定人类不可避免地发生错误，并且提供减轻由于人的认知能力引发的错误后果的机制。
安全相关系统的正确操作与人的操作水平有关，系统设计中要保证：
	尽量减少人为干预的需要。
	必要的干预应尽可能简单。
	把因操作员错误产生的潜在伤害降到最小。
	根据人机工程学的要求来设计干预设备和指示装置。
	操作员的设施应简单、标注清晰、使用直观。
	即使在恶劣情况下,系统也能够采用如自诊断自关闭等自动化方式,避免操作员在恶劣情况下的过度操作。

	设计指导
人因失效要从认知层面的误解（弄错）、错误的记忆规则（记错）以及规则执行错误（疏漏）三个层次来分析，并在系统设计中融入操作容错和防呆等措施，大型复杂系统还需要考虑操作冗余通道和增强操作控制，控制人与系统和设备之间的接口，采用互锁来防止人的行为产生有害的后果。
3.6.9	双向可追溯 （Forward and backward traceability design）
	描述
架构设计需要遵循安全要求规格，确保架构设计时充分实施了安全规格（向前追溯），同时也需要验证架构的设计确实由概念阶段的安全要求规格确定的（向后追溯）。

	设计指导
1.	向后追溯关注于架构设计每一实现的决定都被某些要求清晰论证，否则在实际过程中就包含了一些不必要的、增加复杂性且不一定解决任何安全相关系统的要求。
2.	设计阶段，所有的要求都通过结构或行为模型来满足，在架构设计中使用链接关系来指出哪一个元素能够满足给定的安全要求。
