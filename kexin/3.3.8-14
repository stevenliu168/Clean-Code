3.3.8	利用健康和状态数据（Leverage Health and Status Data）
	描述
健康和状态数据可用于支持态势感知、识别潜在的可疑行为、以适应不断变化的攻击并预测系统面临的风险。 
系统中的组件通常会提供健康数据或者状态数据，以供系统针对性的进行反应，确保系统功能持续的正常提供。系统也可以通过分析架构中多层或多种组件类型的监控数据的相关性，尽早地发现潜在问题，并尝试避免或控制这些问题。
考虑到组件可能错误地或恶意地上报状态和健康数据，可结合“确定持续可信”原则，使本原则的应用更加有效。

	设计指导
1.	对系统组件可能报告的健康和状态数据类型进行分析，并建立系统运行状态基线模型，定义系统的各种运行状态，包括降级、异常运行状态，并与健康和状态数据建立明确的关系。
2.	对监测和上报的健康状况进行分析，识别和追踪异常行为。
	确定能够提供运行状况和状态数据的系统元素或组件，比如应用程序或服务、设备等。
	确定数据上报的对象或采集数据的方式。比如向云协调器、网络管理器进行上报，或者使用日志采集服务收集业务运行日志等。
	分析并确定可对健康和状态数据进行响应的系统元素或组件，并确定其响应方法。比如资源分配、重启进程等。
	提供机制对上报数据进行趋势分析并和基线比较，对超出可接受范围的数据变化进行响应。比如终止服务或进程、终止虚拟机或网络连接、发出警报给安全信息和事件管理（SIEM）服务等。
3.	将其它监测数据和分析数据与系统元素或者组件上报的健康数据和状态数据进行融合分析，识别和追踪异常行为。
	确定其他监测数据的类型，比如环境数据、组织人员变动信息、外部开源威胁情报等等。
	确定其他监测数据的收集方式，比如由管理员定时导入，或者从第三方数据服务接口查询获取，或者采用订阅通知方式获取。
	如果必要，对其它监测数据进行转换，使其适配系统内部的数据模型。
	将其它监测数据与系统内部的监测数据进行综合。数据综合时，需判断数据的有效性；如果存在数据冲突，需要根据数据的可信度来选择使用。数据可信度可通过对数据进行完整性验证或者对比多个独立数据源的数据等方式来判断。
	使用综合后的健康和状态数据进行数据分析，并对比基线，判断是否执行安全响应。

3.3.9	保持态势感知（Maintain Situational Awareness） 
	描述
态势感知是指对系统的运行状况，网络行为及用户行为的变化趋势和异常现象进行感知，进而得出系统mission达成的行动方针的决策。
对于安全韧性，态势感知包括对系统元素、威胁和系统元素mission依赖性的感知。
对系统元素的感知可以依赖于安全态势评估、安全监控和性能监控，并且可以与“利用健康和状态数据”原则相结合。
对威胁的感知包括对各种威胁情报的获取和使用，并能识别出攻击者的演进。
系统元素和威胁的感知通过收集、关联和处理相关数据来实现。感知系统可以实现为集中式或分布式，也可以实现为企业内部的或跨企业的。
   

	设计指导
1.	明确定义mission对系统元素的依赖。Mission对系统元素的依赖，可在系统设计时预先确定，或者在mission操作期间通过跟踪和分析资源使用情况来识别。
2.	提供将网络安全态势数据与其他系统元素数据相关联的能力。确定进行安全监控和分析的系统元素的类型以及是否还需执行与安全无关的监控（例如性能、健康和状态）；确定融合不同形式的监控来提供系统元素在预期行为方面的总体状态；分析态势感知在系统元素类型全面性和未预期行为类型检测能力方面的差距。
3.	提供将威胁情报与网络安全态势数据关联或应用的能力。确定可以获取的威胁情报，分析应用威胁情报的功能，以及评估威胁情报的获取到应用生效的时间。 
4.	提供动态展示系统元素态势变化对mission的影响的能力，系统mission的发展趋势应随系统元素状态的变化而发生改变。分析确定mission对系统元素的依赖，以及系统要素的依赖。确定mission依赖系统元素的时间相关性，即系统元素在不同时间上怎样对任务运行过程产生影响。

3.3.10	 风险适应性的管理资源 （Manage Resources （Risk-） Adaptively）
	描述
风险自适应管理支持系统响应安全事件的敏捷性。在关键操作执行过程中，即使出现组件的损坏或中断，系统仍能够提供风险缓解措施。

  	风险自适应管理的网络安全机制，包括系统的风险自适应访问控制（RAdAC，Risk-Adaptable Access Control）、高度自适应网络安全服务（HACS， Highly Adaptive Cybersecurity Services ，为程序提供渗透测试、事件响应、网络（威胁）狩猎、程序风险和脆弱性评估等服务功能），以及综合自适应网络防御（IACD， Integrated adaptive cyber defense）。
  	为了具备风险自适应性，策略的选择和应用应基于态势感知。即：管理决策应基于攻击者特征变化的迹象、系统元素特征变化的迹象、或操作模式（使用这些操作模式，可改变系统、功能的风险态势）变化的迹象来做出。或者，为了应对未知风险，让策略的应用具有不可预测性。

	设计指导
1.	根据风险状况的变化改变已计划变更的实施频率（已计划的变更，包括重置加密密钥、在OSS或平台之间切换、更改内部路由器的配置等）。可采用手动、半自动、自动等方式来应对不同系统风险的变化。
2.	基于风险增加安全限制。比如要求在单个会话中定期重新验证，对远程位置的请求进行双因素身份验证，或对特定操作进行双人控制，根据变更的关键性增加权限要求等；
3.	重新分配资源，比如重新分配处理、通信或存储资源以实现优雅的降级；重新调整资源用途；
4.	丢弃或隔离可疑的系统元素，比如终止服务或锁定用户帐户；将通信转移到欺骗环境或隔离处理等。

3.3.11	最大化瞬态（Maximize Transience）
	描述
使用瞬态系统元素可以最小化其暴露于攻击活动的时间。同时，将系统元素的状态更新到一个已知的（安全的）状态，也可清除恶意软件或损坏的数据。
瞬态，或者说非持久性，是一种在时间维度上减小攻击面的策略。使用各种虚拟化技术，可有效使能系统元素的瞬态化。使用虚拟化技术模拟软件运行所需的硬件和软件，可以使软件提供的过程、服务、应用程序成为瞬态的。在网络层，网络虚拟化技术（比如VxLAN）、网络功能虚拟化（NFV）、软件定义网络（SDN）和即时连接技术等，可以支持非持久性。数据虚拟化技术则提供了减少本地数据存储持久性的策略。相应的，系统也需要针对瞬态组件，采用相应的可扩展、可替换的架构设计。
逻辑瞬态系统元素（进程、文件、连接 ）需要及时清除，即在共享资源上不能残留任何数据。如果正在运行的进程或者服务已被恶意软件攻陷，这些进程或服务的行为将会被改变，进而这些进程或服务提供给其他系统元素的数据也将会被破坏，此时可以将这些进程或服务通过下线、移动并删除先前的安装等手段进行清除，也可以减轻其损害。这种操作可以在发现可疑行为后执行，也可以有意不可预测地执行。
综上所述，本原则与“使资源位置灵活”原则相辅相成。由于瞬态资源可以被虚拟隔离，该原则也可以与“包含和排除行为”原则结合使用。此外，瞬态资源的实例化，依赖于“确定持续可信”原则的应用，以确保瞬态实例化的系统元素可信。


	设计指导
1.	确定可按需实例化的架构元素，针对这些架构元素进行瞬态化设计。
	确定可以按需实例化的架构元素类型，并给出按需实例化依据，比如根据实际场景判断按需实例化的数据、服务、网络连接等；
	确定按需实例化架构元素的机制，比如采用哪种虚拟化方式；按需实例化的架构元素需要通过可信验证。
	确定清除不再被使用的架构元素实例的机制，比如虚拟机回收、连接释放等；注意需要清除架构元素使用过程中产生的数据。
2.	提供需定期刷新到已知（安全）状态的架构元素，针对这些架构元素进行状态定期刷新设计。
	确定需要定期刷新的架构元素类型，并定义好已知（安全）状态。
	如果架构元素需要使用数据、配置、镜像或软件包等才能恢复至已知（安全）状态，则需要设计架构元素已知（安全）状态数据、配置、镜像或软件包等的保存机制，并确保其不可被非授权的修改。
	提供将架构元素恢复到已知（安全）状态的机制，包括但不限于更新配置、导入数据、重新安装等操作；
	提供机制能够检查架构元素是否处于异常状态或不安全状态，并在检测到状态不正常后，触发执行架构元素的状态恢复操作；或者，通过最小系统执行架构元素状态恢复操作。再者，也可以提供机制周期性地恢复架构元素状态。

3.3.12	确定持续可信（Determine Ongoing Trustworthiness）
	描述
定期或持续地验证数据、软件的完整性或正确性，可以增加攻击者试图修改、伪造数据或功能所需的工作量。同样，定期或持续地分析单个用户、系统组件和服务的行为，也可以对可疑行为采取更密切的监控，或触发更严格的权限控制或隔离响应。
在攻击者实施网络攻击过程中，攻击者为获取对系统的控制，可以修改系统组件（例如修改软件或用恶意软件替换合法软件）、系统数据（例如修改配置文件、在授权数据库中伪造条目、伪造或删除审计数据）或mission数据（例如在mission或业务数据库中删除、更改或插入条目，将用户创建的文件替换为伪造的版本）。这些恶意修改为攻击者后续执行和维持恶意代码等活动提供了条件。定期或持续地验证数据或软件的完整性或正确性，可以在不利影响发生、加剧或无法补救之前，检测到攻击行为或攻击活动。
可以使用各种已证实的完整性机制来识别可疑的属性或行为变更。例如：服务发出请求的频率、服务的请求和响应之间的延时、服务产生请求或响应的大小等，可用于服务行为的验证；而处理器、存储器、磁盘或网络的使用情况，也可以被用于资源使用行为的验证。

本原则与“风险适应性的管理资源”原则可协同使用。本原则会增加系统开销时，因此可以在“关注关键资产”战略性原则指导下使用。

	设计指导
1.	确定能够被验证的服务行为。
	基于关键性和易实施性等依据选择可以进行行为验证的服务；
	通过系统元素识别、特定频率或采样率识别等方式，确定可以被验证的行为；
	通过建立阈值（最小值和最大值），或基于过去的行为时间窗口大小等，确定行为被验证的方式；
	确定行为被验证异常后的响应措施，比如：可以针对超过或低于预期阈值的异常行为发出通知。
2.	验证设备配置、软件模块和关键数据的完整性。
	基于关键性和易实施性等依据确定可以验证完整性的资源类型和资源，例如：数据库记录、数据文件、设备配置文件、可执行模块等；
	确定资源完整性验证的机制和时机，验证机制的选择需要考虑避免被绕过（例如通过替换新的签名），采用定期、随机、基于事件触发等方式进行验证时间控制；
	另外，完整性验证机制还要考虑对受保护的备份和恢复机制不要造成影响。
3.3.13	改变或扰乱攻击面（Change or Disrupt the Attack Surface）
	描述
扰乱攻击面会导致攻击者浪费资源，对系统或防御者做出错误的假设，或过早地发起攻击，或泄露攻击信息从而暴露攻击者的存在。

移动目标防御（MTD，Moving Target Defense）系列技术就旨在改变或破坏系统的攻击面。MTD是目前业界研究和开发中的一个活跃领域。
MTD可以基于组织已应用的防御层次或级别（例如数据、软件、运行环境、平台和网络）进行分类，也可以应用于物理或地理层次，而当MTD作为中间件层级实现时，特别适用于云架构中。
MTD也可以按照移动、转变形态、切换等策略进行分类。
资源移动，可以采用动态定位技术，并结合“使资源位置灵活”原则来实现，例如：将服务的执行从一个平台或虚拟机移动到另一个平台或虚拟机上。
转变形态，是指对数据的属性、运行时环境、软件、平台或网络属性进行特定的修改，或者将配置改变与多样性和不可预测性（或随机化）技术一起使用，而不仅仅是使用重定位、分布式技术。数据和软件可通过合成多样性技术来转变形态；系统元素的行为可通过改变配置或变更资源分配来转变形态。此外，改变形态技术也可作为欺骗策略的一部分来使用。
切换，可以利用多样性和分布式资源，Mission依赖的服务可从一种实现切换到另外一种实现。切换也可以与欺骗技术一起使用，比如将攻击者与系统的交互切换到欺骗环境中。

本结构性可支持“预期攻击者演进”、“减少攻击面”和“假设资源受损”战略性原则。当本原则且将不可预测性技术作为实现方式的一部分时，本原则应该与“使不可预测性和欺骗的效果对用户透明”原则一起使用。

	设计指导
1.	提供将架构元素迁移的能力或机制。
	确定迁移架构元素的类型以及选择依据，比如根据系统元素关键性，从数据存储、服务中选择架构元素等；
	提供架构元素移动的机制，比如提供虚拟化机制等；
	分析和确定实施架构元素移动的触发条件，比如可疑行为、系统元素的性能负载、随机化等。
2.	提供从一个架构元素切换到一组等效的不同架构元素的机制。
	确定为这些架构元素提供的等效版本，并确定等效版本选择的依据。
	分析和确定导致系统元素切换到等效架构元素的原因，并制定应对措施。
3.	提供改变架构元素行为或属性的能力或机制。
	确定可以更改的架构元素行为或属性（比如性能、延迟、权限要求、其他使用限制），以及其相关的架构元素在架构中的层次（比如网络、平台、操作系统、应用程序或服务、数据存储等）；
	确定更改架构元素的行为或属性的方法，比如配置更改、资源分配更改等；
	分析和确定在那些原因或情况下会触发行为或属性的变更，制定触发机制。比如自动触发、操作员或管理员干预触发等。
3.3.14	使不可预测和欺骗的效果对用户透明（Make Unpredictability and Deception User-Transparent）
	描述
欺骗和不可预测技术作为应对攻击者的高效技术，能够暴露攻击者的TTP、意图和目标，或者浪费其精力。但是，如果应用不当，这些技术也会对用户造成困惑。
  	欺骗和不可预测技术旨在让攻击者更加难于确定系统的结构和行为，更加难于确定实施攻击后达到预期效果，以及更加难于确定网络防御者为应对可疑的恶意网络活动可能采取的行为。具体来说：
	欺骗技术（包含混淆技术）：这类技术增加了攻击者所需的工作量，并可以足够长时间地隐藏mission活动，使mission不受攻击者干扰地完成。主动欺骗技术（比如蜜罐、蜜网）则可转移攻击者的活动，导致攻击者浪费资源，并暴露其TTP、意图和攻击目标。
	不可预测技术可以应用于特征、结构或行为。不可预测的结构（例如动态变更分区、动态隔离组件等）可削弱攻击者的侦查效果；不可预测的特征（例如配置、多样化等效元素的选择等）可迫使攻击者开发更广泛的TTP；不可预测的行为（例如响应延时）可增加外部从系统响应中感知系统是否感知到恶意活动，以及系统防范效果的不确定性。
  	
不可预测技术和欺骗技术可分别使用，也可协同使用。这两种技术可有效对抗高级攻击者。但是，如果这两种技术实现不佳，也会让用户或者管理员对系统行为感受到更多的不确定性，而用户或管理员的这种困惑会降低整体的韧性、可靠性和安全性。这种不确定性，也会使未授权行为、可疑行为的检测更加困难。

因此，本原则要求合理的实施不可预测技术和欺骗技术，使得这些针对攻击者的技术实现，对最终用户和系统管理员透明。

	设计指导
1.	对数据采用混淆或隐藏技术（比如匿名化、假名化、加密）时，需考虑数据混淆或隐藏对最终用户或管理员正常地、合理地获取其应用场景下所需的信息是否产生不良影响。并在实施混淆、隐藏技术，或设计混淆、隐藏功能时，排除或者最小化这些不良影响。
2.	对外披露大量数据的场景，如果涉及个人数据则需要采取针对数据集合的混淆技术，以防止数据链接攻击和差分攻击，使用这些混淆技术时，需合理调整参数设置，使输出数据集合的统计结果即能满足数据披露目的，又能保护数据不泄露个人数据。
3.	混淆或隐藏系统安全敏感行为。系统安全敏感行为是能被攻击者感知到系统内部安全韧性防范措施如何设计、如何被触发、何时执行或何时结束，以及执行效果怎样的行为。这些行为不应与用户接口数据、接口时延或者接口响应时延建立可识别或容易被识别的关系；同时也不应该与系统对环境参数（电磁场参量、功耗、温度等，是侧信道攻击的主要数据源）的影响建立可识别或容易识别的关系。敏感行为对接口、环境变量的影响需要在设计时进行识别，并针对性的采用混淆措施，比如随机化接口时延、平均化功耗等。这类技术实施后，可达到系统内部敏感行为同时对攻击者和用户透明的效果。但实施这类技术时，需要平衡用户对性能、交互体验等方面的影响。
4.	随机化执行安全韧性功能，或者随机化执行同一个安全韧性功能的不同版本，可有效增加系统内部安全功能的不确定性。实施这些不可预测技术时，需要调整实施强度或不同功能版本之间的差异性，不能因内部选择对最终用户和管理员造成可感知或不可接受的差别。
5.	系统内部元素之间使用欺骗、不可预测技术，会影响内部元素之间的交互效率，对系统整体性能产生影响。此时需要结合“关注关键资产”原则，对关键保护对象实施保护，并且合理的设置保护措施的强度。使系统整体的性能影响不对最终用户或管理员造成不良影响。
