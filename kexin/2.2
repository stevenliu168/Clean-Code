2.2.1	开放设计（Open design）
	描述
设计不应该是秘密的，不应依赖对设计和实现的保密、以及攻击者的无知；应当使产品的设计经受充分的检验，即使在所有安全设计都曝光的情况下，系统仍然安全可靠，这样的设计才是真正安全的。  

	设计指导
1.	系统设计的内/外部交互流程及其实现细节等假定都是可能被公开的，不能依赖于设计方案的保密来保证系统的安全，要确保攻击者即使获取设计方案也不能成功攻击系统。如：采用业界公认的标准认证协议TLS保证认证的安全性，不用自己设计认证算法。
2.	使用业界公开的、标准的、成熟的密码算法，禁止使用私有的加密算法，如：自行设计的密码算法、自行对标准密码算法进行改造的等。

2.2.2	不要轻信（Reluctance to trust）
	描述
要假设正常业务的流程以及运行环境（周边接口/依赖）是不可信的，不应该轻易地信任对方。授权的信任（凭据）可能会在不同对象间扩散，应该在一开始就谨慎决定是否授予对方信任的权限。

	设计指导
1.	不能轻信对端：不能轻信客户端访问和连接请求，不能在客户端隐藏敏感数据,针对客户端的安全校验机制不能在客户端设计，必须在后台服务端来设计；同样，客户端也不能轻信服务端，必要时需要将数据自己实现保护才存入服务端。
2.	不能轻信远程网络访问请求：不能轻信任何第三方的远程网络访问请求，每一个请求都应该有安全机制进行校验检查。例如，可以采用API网关机制，对外部所有API调用请求进行统一鉴权校验检测。
3.	不能轻信缓存数据：一旦缓存被攻击篡改，每次从缓存取得的数据都是被伪造的。可以在保证缓存性能的要求下，通过定期对缓存数据进行检测，保证缓存的完整性，确认没有被非法篡改，再继续使用缓存。

2.2.3	权限分离（Separation of privilege）
	描述
对系统权限进行合理划分，不同权限分配给不同角色（如配置人员、维护人员等），避免某个角色权限过大（分权）；或者将一个重要事务的操作权限分解为2个或者多个子权限并分配给多个角色，来共同完成事务的操作，避免因为权限过于集中而造成被滥用（制约）。  

	设计指导
1.	系统权限需要划分，确保权限不重复和交叉。
	拆分系统权限，避免一个人拥有两个或两个以上互相冲突活动的权限。如：根据系统管理、运维、租户等不同的角色赋予不同的权限；
	拆分数据管理权限，数据所有者负责数据分类、定义安全控制措施和批准访问请求，数据看管员负责实施安全控制措施、执行数据备份等维护工作。
2.	将某个重要事务权限拆分成多个子权限并将不同子权限分配给多个用户，防止权限滥用。如：删除系统中关键数据时须事前审批，多人监督执行。


2.2.4	经济适用（Economy of mechanism）
	描述
经济适用原则是指系统要尽可能设计得精简、小巧，在满足业务功能的前提下尽可能精简模块和代码。软件设计愈复杂，代码中出现Bug的几率愈高，如果设计尽可能精巧，那么出现安全问题几率也小。

	设计指导
1.	系统设计越复杂，运行路径就越多，越容易产生安全问题，产生安全漏洞的可能性也会增加。系统需要精简，删除不需要的、不必要的模块和进程等；
2.	开发和使用可以重用的组件、模块或者（微）服务等，降低系统总体复杂度。可复用多个场景的功能，设计开发相同的公共的组件，例如：密钥管理组件、华为Web安全框架（WSF，Web Secure Framework）等。
3.	产品根据业务特征、网络位置选择适用的安全技术，避免过度设计。

2.2.5	失败-默认安全（Fail-secure defaults）
	描述
该原则限制了创建主体（主体通常指进程或者线程）和客体（通常是指资源，比如：文件、目录、I/O设备、共享内存、TCP/IP端口等）时如何初始化应有的权限。
该原则要求对客体的默认访问权限为无（None）。 任何时刻访问、提权或改变安全相关属性时，如果未经明确授权都应默认拒绝。

备注：为了和Safety的fail-safe原则明确区别，更好的表达Fail-Secure的概念，这里将经典的八大原则Fail-safe defaults进行部分修正。

	设计指导
1.	失败安全（系统需要有应急安全机制）
系统故障后，系统总体应处于被安全保护的状态，安全机制不能失效:
	失败后要撤销更改，并恢复到安全的状态；
	即使可用性丧失情况下，也要保持系统的机密性、完整性；
	如果攻击者在正常情况下没有访问权限，那么故障的情况下也不应该让攻击者获得访问对象的权限。
	故障时系统不能暴露敏感信息避免潜在攻击者利用该信息发起有效攻击,如：Session ID、加密密钥、OS类型和版本等。
需预判系统故障后各种可能场景，确保在这些场景情况下不会威胁到系统的安全性
2.	默认安全（系统在初始状态下，默认配置是安全的）
	默认设置阈值对多次认证失败的用户进行锁定；
	设置默认防火墙访问策略，对不符合安全规则的报文，全部阻止在防火墙外部；
	数据要默认采用防护措施，避免数据库在异常情况下出现数据损坏、数据丢失或泄露现象。如：RAID（磁盘阵列）、双机容错、NAS（网络附属存储）、DLP（数据泄露防护）等。

2.2.6	最小公共化（Least common dependence）
	描述
尽量减少被多个用户或对象同时使用的依赖。这种依赖可能是系统资源，也可能是某种机制，甚至可能是某个共享状态变量。
对系统中共享资源访问的数量和使用应尽可能最小化，这也是减小攻击面的一种形式。
尽可能的避免不同组件使用共同依赖的机制访问系统资源，防止攻击者通过劫持一个组件，然后通过该公共机制攻击其它组件。

注：架构设计时，架构师应充分理解共享机制带来方便性的同时，一定要注意随之而来的安全风险。

	设计指导
1.	尽量减少多个对象共享同一资源的场景，有效减低攻击面。如共享内存、共享磁盘挂载、多线程连接访问等场景。
2.	最大限度地减少多位用户共用或所有用户所依赖的机制数量，系统的不同组件应避免使用相同的机制来访问系统资源。
