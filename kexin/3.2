3.2.1	最小公共机制（Least Common Mechanism）
	描述
最大限度地减少多位用户共用或所有用户所依赖的机制数量。
实施最小公共机制的原则有助于减少不同程序之间共享系统状态的不利后果。破坏共享状态（包括共享变量）的单个程序有可能破坏依赖于该状态的其他程序

	设计指导
1.	系统的不同组件应避免使用相同的机制来访问系统资源。例如：共享机制必须让每一个参与的对象都感到满意，如果一个或者多个对象不满意共享机制提供的服务，那他们可以选择换一个共享机制，或者选择根本不用共享机制，以免被其他对象的BUG间接攻击到。
2.	每个共享机制（特别是涉及共享变量的机制）代表了用户之间潜在的信息路径，必须非常谨慎地设计，以确保其不会无意中危及安全性。例如：如果共享访问连接中存在高风险高影响的连接导致共享机制设计的复杂性，应该将那个连接对象从共享方案中去掉，从而简化共享机制的设计，避免影响其它共享方案中的对象。

3.2.2	偏序依赖性（Partially Ordered Dependencies）
	描述
系统中的调用、同步和其它依赖性应是偏序的。这些偏序依赖性决定了系统中的可信性也是偏序的。
偏序依赖性和系统分层能够极大地促进系统设计的简化和一致性。同时,偏序依赖性也有助于系统测试和分析。

	设计指导
1.	系统设计中的一个基本概念是分层，借此将系统组织成定义明确、功能相关的模块或组件。
2.	这些分层相对于层间依赖性而言是线性有序的，使得较高层依赖于较低层。这种依赖性的线性有序决定了系统中的可信性也是线性有序的。较高层的可信性依赖于较低层的可信性。
3.	系统中不应出现循环的依赖，或者应将可能出现的循环依赖限制在同一层发生。循环依赖将导致系统中的偏序可信性的秩序彻底崩塌，系统中所有层的可信性将和最不可信的那一层的可信性相同。这是不可接受的。


3.2.3	访问控制（Access Control）
	描述
按用户身份及其所归属的某项定义组来限制用户对某些信息项的访问，或限制对某些控制功能的使用。访问控制是系统安全的基础，它能够保护系统和资源免受未授权的访问。

	设计指导
保证合法用户访问受权保护的网络资源，防止非法的主体进入受保护的网络资源，或防止合法用户对受保护的网络资源进行非授权的访问。访问控制首先需要对用户身份的合法性进行验证，同时利用控制策略进行选用和管理工作。当用户身份和访问权限验证之后，还需要对越权操作进行监控。 
	划分访问控制类型：物理访问控制和逻辑访问控制。物理访问控制如符合标准规定的用户、设备、门、锁和安全环境等方面的要求，而逻辑访问控制则是在数据、应用、系统、网络和权限等层面进行实现的。存在几种访问控制类型有，比如自主访问控制（DAC）、强制访问控制（MAC）和基于角色访问控制（RBAC）。
	制定安全策略，在某个自治区域内（属于某个组织的一系列处理和通信资源范畴），用于所有与安全相关活动的一套访问控制规则。此安全区域中的安全权力机构建立，并由此安全控制机构来描述和实现。访问控制的安全策略如：基于身份的安全策略、基于规则的安全策略和综合访问控制方式等
	认证服务的实现，比如认证、鉴权、审计

3.2.4	最小化共享（Minimized Sharing）
	描述
除非绝对必要，否则不应在系统组件（例如，对象、流程、功能）之间共享计算机资源。通过公共机制共享会增加数据和信息对未经授权的访问、公开、使用或修改的敏感性，并且会对系统提供的固有能力产生不利影响。
最小化共享有助于简化设计和实施，有效保护用户域资源免受任意活跃实体的影响。

	设计指导
1.	为了保护用户域资源免受任意活跃实体的影响，除非已明确请求和授权该共享，否则不应共享任何资源。例如，为降低用户或资源的相互影响，尽量避免使用共享内存，共享文件等。
2.	资源共享的需要可以通过内部实体中最不常见机制的原则来推动，或者由利益相关者的要求来驱动。
3.	必须谨慎设计内部共享，以避免性能和隐蔽存储通道及隐蔽定时通道的问题。例如，为了帮助最小化由公共机制引起的共享，可以将该机制设计为可重入或虚拟化的，实现各种资源的分离。

3.2.5	降低复杂性（Reduced Complexity）
	描述
系统设计应尽可能简单和小巧。小巧简单的设计将更易于理解、更易于分析并且不易出错。该原则适用于系统的任何方面，但它对安全性尤其重要。安全性要求获得有关系统紧急安全属性的证据，并对这些证据进行各种分析，这些分析如果要获得成功的结果，采用小巧简单的设计自是必不可少的。

	设计指导
应用降低复杂性的原则有助于系统开发人员理解系统安全功能的正确性和完整性。除此之外，还有助于识别潜在的漏洞。降低复杂性的必然结果表明，系统的简单性与其将包含的漏洞数量直接相关——也就是说，系统越简单漏洞也就越少。降低复杂性的一个重要好处是，更易于理解系统设计中是否采用了预期的安全策略，从而减少在工程开发期间可能引入的漏洞。

3.2.6	安全演进（Secure Evolvability）
	描述
  	期望复杂系统在开发期间未设想的环境中保持安全是不现实的，无论这些环境是与操作环境还是与用途相关。系统在某些新环境中可能是安全的，但这并不能保证其紧急行为始终是安全的。
  	系统的功能结构、接口和互连（即系统架构）或其功能配置（即安全策略实施）发生变化时，系统能够保证安全属性的维护。这些变化可能包括：新的、增强的和升级的系统功能；维护和维持活动；及重新配置等。
  	这一原则的好处包括供应商的生命周期成本降低；拥有成本降低；系统安全性提高；安全风险管理更高效；风险不确定性较小。

	设计指导
1.	从一开始就在系统中建立可信性很容易，因此系统可信性的维持需要规划变化而不是以临时或非有条理的方式进行调整。
2.	分析任务或业务战略方向来预测系统的升级或者变更，比如客户对于业务潜在的演变要求，预测系统存在的变更或升级可能性。
3.	预测威胁环境的变化，比如威胁环境随着时间的推移发生的潜在变化。
4.	预测维护和维持需求，比如保持现有的安全能力，需要新增需求，并将需求在安全演变的阶段上进行实施。

3.2.7	可信组件（Trusted Components）
	描述
组件必须可信，至少达到与其支持的安全依赖性相称的程度（即，其他组件执行其安全功能时的可信程度），这一原则使得组件在组合时，可信性不会被无意减少，信任也不会错位。最后，该原则借助一些度量在相同的抽象刻度上测量组件中的信任和组件可信性。
在考虑存在复杂信任依赖链的系统和组件时，该原则尤为重要。该原则同样适用于由若干子组件（例如子系统）组成的复合组件，这些子组件具有不同的可信性。保守的假设是，复合组件的总体可信性是其最不可信组件的可信性。

	设计指导
可信组件是系统建立可信秩序的基石。
	组件可信意味着需要通过分析、建模、验证等手段确保组件的可信程度。
	当组件本身与其它组件有安全依赖关系的时候，组件的可信度必须至少达到能够支持完成该安全依赖的功能的可信度（例如：CRTM、TPM、密钥管理系统、形式化证明后的微内核、操作系统CIS标准）。否则将无法保证可信组件组合的可信性。
	实现可信组件，需要建立抽象的相同刻度的可信度量方法，评估组件的可信度。从而在可信组件组合后，分析、评估和确定各层的可信度和整个系统的可信度。
3.2.8	分层信任（Hierarchical Trust）
	描述
   	组件的分层信任原则建立在可信组件的原则之上。如果系统中的安全依赖关系保留了可信组件的原则，则它们将形成偏序。当在不同类可信组件中组成安全系统时，偏序为可信性推理提供了依据。为了能够分析由不同类可信组件组成的系统的整体可信性，必须消除关于可信组件间循环依赖关系的可信性。 架构师需考虑分层中的每层的可信组件。
但是，这一原则并不禁止使用过度可信的组件。在可信性低的系统中可能存在这样的情况：使用高度可信的组件而不是不那么可信的组件是合理的（例如，出于可用性或其他成本效益驱动因素）。对于这种情况，高度可信组件对不那么可信组件的任何依赖性并不会降低由此产生的低信任系统的整体可信性。

	设计指导
1.	系统中可信组件通过安全依赖关系建立线性的偏序可信关系。通过有效组织安全依赖关系，能够构建从系统底层到高层的，线性有序的可信秩序。例如系统中高层组件的可信性依赖于其下层组件的可信性，并逐步扩展到系统最底层组件。从底层组件到高层组件之间建立起了一种有序的信任关系或信任链。由此可见系统中最底层的组件应是系统中最可信的组件，比如，操作系统的内核应是系统中最可信的。
2.	如果位于系统较低层的更可信组件依赖于较高层中不那么可信的组件，则这实际上是根据可信组件的原则将组件置于相同的“不那么可信”的等价类中。信任关系或信任链具有多种表现形式。例如，证书层次结构的根证书是层次结构中最受信任的节点，而层次结构中的叶子节点可能是最不可信的节点。
3.	在分层的高保证系统中，其中位于系统最低层的安全内核（包括硬件基础）是最可信的组件，需要某种特定手段来证明（例如，形式化的证明）其可信性。
3.2.9	分层保护（Hierarchical Protection）
	描述
在分层的基础上，需要保护组件免受相对不可信组件的影响，但不需要保护组件免受更加可信组件的影响。运用安全的失败和恢复原则，在最可信组件退化的情况下，它必须持续保护自身免受其它所有组件的影响。
用户的可信性是应用分层保护原则的一个考虑因素。可信计算机系统不需要保护自身免受同等可信用户的影响。

	设计指导
1.	一个组件不需要防止比它更可信组件的攻击，退化场景，最高信任级别的组件，需要防止所有其它组件的攻击。例如，如果操作系统内核被认为是系统中最可信的组件，那么它必须在合适的位置部署保护机制，以阻止任何不可信的应用程序的攻击，但是应用程序并不需要保护内核的攻击。
2.	可信计算机系统不需要保护自身免受同等可信用户或外部环境的影响。例如，在高可信的网络或系统环境中，使用不可信系统或组件时，该系统或组件不需要考虑防御来自于外部环境或用户的攻击（因为外部环境是更可信的）。

3.2.10	最小化安全元素（Minimized Security Elements）
	描述
系统不应具有无关的可信组件，可信组件在系统中越少，系统就越简单，内部信任关系也就越少。例如，操作系统中不使用的功能和服务，应该去除或裁剪掉，特别是废弃的驱动程序和已经去除硬件的驱动代码。架构师使用此原则，可减少安全分析的总成本和复杂性。

	设计指导
1.	实施该原则可以降低可信组件安全分析的总成本和安全分析的复杂性。由于开发过程的要求愈加严格，因此可信组件（必然值得信赖）构建成本通常也较高。除此之外，他们还需要更高的安全分析来确定可信性。因此，为了降低成本并降低安全性分析的复杂性，系统应包含尽可能少的可信组件。
2.	实施该原则可以降低整个系统的安全分析的复杂性。可信组件与系统其他组件的交互分析是系统安全验证最重要的方面之一。如果这些交互存在不必要的复杂性，那么系统的安全性也将比那些内部信任关系简单且易于构建的系统更难以确定。
3.2.11	最小权限（Least Privilege）
	描述
应为每个对象和组件分配足够的权限来完成其指定的功能，但也不能太多。对系统中每一个用户、每一个组件，都赋予必要的足够的并且最少的权限，权限不多不少，正好可以完成操作。这限制了组件操作的范围，带来了两个理想的效果：组件故障、腐化或误用的安全影响最小化；并且可简化组件的安全性分析。
除系统界面上的表现形式外，最小权限也可用作系统本身内部结构的指导原则。内部最小权限指出，模块间的元素访问，必须通过模块接口间接访问；且模块只能包含功能必须的系统元素。

	设计指导
1.	最小权限是一种普遍原则，反映在安全系统设计的各个方面。用于调用组件功能的接口应仅对用户群的某些子集有效，并且组件设计应该支持足够精细的权限分解粒度。例如，在审计机制下，可能存在专为审计经理（配置审计）设计的接口；专为审计操作员（确保审计数据的安全收集和存储）设计的接口。最后，审计审查者的另一个界面，该审查者只需要查看已收集的审计数据，而无法对这些数据执行操作。
2.	内部最小权限的一个方面是构建模块，使得模块内的功能直接操作仅由模块封装的元素。模块外部可能受模块操作影响的元素通过与包含这些元素的模块交互（例如，通过函数调用）进行间接访问。内部最小权限的另一个方面是，给定模块或组件的范围应仅包括其功能所必需的系统元素，并且访问元素的模式（例如，读取、写入）也应处于最低水平。
3.2.12	自主的可信性（Self-Reliant Trustworthiness）
	描述
系统应尽量减少对其它系统的依赖，以实现自身可信性。遵循该原则的好处是系统的隔离将使系统不易受到攻击

	设计指导
1.	默认情况下，系统应可信，并且可与用于补充其功能的外部实体建立任何连接。如果某个系统需与另一个外部实体保持连接以保持其可信性，则该系统可能易于受到恶意和非恶意威胁，从而导致该连接丢失或降级。（例如,云计算环境下，5G核心网系统应内置IPSEC隧道安全连接的能力，而不应依赖于外置的IPSEC设备来构建可信通道）
2.	由于系统的自主可信，系统（或系统元素）需具有在隔离状态下能自主独立操作的能力。当系统（或系统元素）在和其它组件重新连接时，需要和其它组件重新同步各自的状态。

3.2.13	数据安全（Data Security）
	描述
系统应提供保护措施防止数据在处理、存储、传输过程中不会因偶然或恶意的原因发生增加、修改、破坏、丢失和泄露等。数据安全包括：
	数据保密性或机密性，保证个人或团体的信息不为其它不应获得者获得。
	数据完整性，在传输、存储信息或数据的过程中，确保信息或数据不被未授权的篡改或在篡改后能够被迅速发，比如数据加密、数据通道安全等。
	数据可用性，数据可用性是一种以使用者为中心的设计概念，可用性设计的重点在于让产品的设计能够符合使用者的习惯与需求，数据能够被使用。

	设计指导
1.	数据本身的安全，主要是指采用现代密码算法对数据进行主动保护，数据本身的安全必须基于可靠的加密算法与安全体系，主要是有对称算法与公开密钥密码体系两种。
	在数据或信息存储时，对数据进行加密，保证其机密性。
	在数据或信息传输时，对数据进行加密、签名或使用安全的数据通道，保证其传输时的机密性和完整性。
	当数据或信息传输时，采用双向强身份认证确保数据传输时数据交换的双方的可信关系。
2.	数据防护的安全，主要是采用现代信息存储手段对数据进行主动防护，保护数据的持续可用性。如通过磁盘阵列、数据备份、异地容灾等手段保证数据的安全。
3.2.14	持续保护（Continuous Protection）
	描述
用于实施安全策略的所有组件和数据必须具有与安全策略和安全架构假设一致的不间断保护。如果保护方面存在差距，则无法保证系统能够为其设计能力提供指定的保密性、完整性、可用性和隐私保护。展示持续保护的能力根源于明确阐述生命周期保护需求作为利益相关者的安全要求。持续保护要求遵守：
	基准监控概念的规则:每个请求均由基准监控器验证，基准监控器能够保护自身免受篡改，并可充分保证通过分析和测试确定机制的正确性和完整性
	安全故障和恢复的原则:即，在错误、故障、失效和成功攻击期间保持安全状态；在恢复正常、降级或替代操作模式期间保持安全状态。

	设计指导
1.	在系统控制下（即，在数据和信息的创建、存储、处理或通信期间，以及在系统初始化、执行、故障、中断和关闭期间），任何时间段的数据和信息均受到保护。
2.	不同配置中操作的系统中具有持续保护能力，包括提供完整操作能力的配置和提供部分操作能力的其他降级模式配置
3.	对系统安全策略的更改可被追溯，且可被验证（即，必须可验证，确保更改不会使系统进入不安全状态），因为问题的复杂性或不可判定性，可追溯性和验证不足可能导致状态不一致或保护不连续。预先验证能够反映新策略的配置，能够分析并确定从旧策略到新策略的转换基本上具有原子性，并且保证旧策略的任何残留影响均不会与新策略冲突。

3.2.15	问责制和可追溯性（ Accountability and Traceability）
	描述
问责制和可追溯性原则指出，必须能够将安全相关的行动（即主体与客体互动）追溯到代表其采取行动的实体。此原则要求可信的基础设施，该基础设施可记录关于影响系统安全的行动的细节（例如，审计子系统）。问责制和可追溯性所起的另一个重要作用是对违反安全策略的相关事件进行例行和取证分析。对审计日志的分析能够提供可能有助于确定允许违反安全策略的路径或组件的附加信息，以及与违反安全策略相关联的个人行动。

	设计指导
1.	系统不仅必须能够唯一地识别代表其采取行动的实体，还要记录采取的影响系统安全的相关行动序列。（例如，设备的审计子系统，不仅要记录管理员操作，还要记录系统内部数据库、文件等读写操作。）
2.	问责制策略必须要求审计跟踪本身可防止未经授权的访问和修改。最小权限原则有助于将行动追溯到特定实体，因为其增加了问责制的粒度。将行动与系统实体相关联，最终与用户相关联，并使审计跟踪防止未经授权的访问和修改，从而提供不可否认性，因为一旦记录行动，就无法更改审计跟踪。

3.2.16	默认安全（Secure Defaults）
	描述
默认安全原则是指系统（包括其组成子系统、组件和机制）的默认配置须采用严格限制的和保守的安全策略。默认安全原则要求在设计系统的初始配置（比如：默认配置），访问控制机制和其他安全功能时，应遵循“默认拒绝，除非明确授权”策略。
此原则的安全工程方法指出，仅当请求符合语法规则且与安全策略一致，否则安全机制应拒绝请求。不安全的替代方案是允许请求，除非证明请求与策略不一致。在大型系统中，授予默认拒绝请求必须满足的条件通常比需要检查以拒绝默认授予请求的条件更加紧凑和完整。

	设计指导
1.	此原则在初始配置方面要求系统、子系统或组件的任何“随附”配置不应导致违反安全策略。默认配置中应有自带的默认的安全策略。不能出现默认配置本身的安全策略还需要用户进行配置的情况，禁止系统在此种默认配置下运行。
2.	限制性默认值意味着系统将以“随附”配置运行，系统以该配置运行时应具有足够的自我保护能力，并且能够在建立预期安全策略和系统配置之前防止安全漏洞。如果“随附”产品提供的保护不充分，则利益相关者必须在建立安全初始状态前评估使用风险。遵守安全默认值原则可确保在成功完成初始化后建立处于安全状态的系统。
3.	在系统无法完成初始化的情况下，系统将使用安全默认值执行请求的操作，或者将不执行操作。另请见持续保护以及安全的故障和恢复原则，这些原则与此原则相似，可提供检测故障并从故障中恢复的能力。
4.	随附配置运行不仅意味着设备初始运行时默认配置应默认安全，而且意味着设备运行中的访问控制的默认策略以及状态机的默认状态都应遵循“拒绝，除非明确授权”策略。例如，运行时的防火墙中的访问控制的整体默认策略就是“拒绝，除非明确授权”策略。

3.2.17	安全的故障和恢复（Secure Failure and Recovery）
	描述
系统功能或机制的故障以及响应故障的任何恢复行动不能违反安全策略，可确保系统能够在其操作的任何阶段（即初始化、正常操作、关闭和维护）检测（在限制范围内）实际和即将发生的故障，并采取适当的措施确保不违反安全策略。系统能够从即将发生或实际故障中恢复，以恢复正常、降级或替代安全操作，同时确保保持安全状态。

	设计指导
1.	故障指组件的行为偏离其明确记录输入的指定或预期行为。一旦检测到安全功能故障，系统可自动重新配置以绕过故障组件，同时保持安全，并继续提供原始系统的全部或部分功能，或完全关闭系统本身以防止任何（进一步）违反安全策略。为此，系统的重新配置功能应设计为确保在重新配置的各个阶段期间持续执行安全策略。可用于从故障中恢复的另一种技术是执行回滚到安全状态（可能是初始状态），然后关闭或更换故障服务或组件，以便可恢复安全操作。使用故障组件的组件可能会也可能不会检测到此故障。安全故障的原则指示，组件发生故障后应处于拒绝而非授予访问权限的状态。例如，被标识为“原子”的操作在还没有完成时被中断，不应违反安全策略，因此必须设计为通过采用更高级别的原子性和回滚机制（例如，事务）来处理中断事件。如果正在使用某项服务，则必须对其原子性属性进行详细记录和特征描述，以便利用该服务的组件可适当检测和处理中断事件。例如，系统应设计为在断开连接后正常响应断开连接并支持重新同步和数据一致性。
2.	采用策略执行机制冗余的故障保护策略（有时称为“深度防御”）可允许系统继续处于安全状态，即使一个机制未能保护系统。然而，如果机制相似，则额外的保护可能是一种假象，因为攻击者可完全进行连续攻击。同样，在网络化系统中，破坏一个系统或服务中的安全可能使攻击者能够在其他类似冗余系统和服务中执行相同操作。通过采用特征明显不同的多种保护机制，可减少攻击冗余或重复的可能性。应进行分析，以根据增加的资源使用和对整体系统性能的不利影响，衡量此类冗余技术的成本和收益。随着这些机制的复杂性增加，应进行额外分析，动态行为也是如此。增加的复杂性通常会降低可信性。当资源无法受到持续保护时，在资源再次在安全环境中使用之前，必须检测和修复任何安全漏洞。

3.2.18	可接受的安全性（Acceptable Security）
	描述
要求安全机制的成本不应高于安全漏洞可能造成的潜在损害成本；构建的安全机制不会不必要地降低性能，性能水平达到用户所期望的水平；系统提供的安全功能和支持服务的用户界面应直观、用户友好。

	设计指导
1.	防止系统设计者采用强度超过必要程度的安全机制（其中机制的强度与成本成正比），导致成本失控。
2.	精确地阐明利益相关者和系统设计有关性能和安全的要求，并确定其优先级。根据安全要求以及性能关键的开销问题和威胁能力评估来选择适宜的安全机制强度，并被利益相关者所接受。
3.	强制执行安全策略的机制不应对用户造成干扰，并且设计时不应降低用户效率。在做出不安全的选择时，此类机制还应为用户提供有意义、清晰且相关的反馈和警告。
